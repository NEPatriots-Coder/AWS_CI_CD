name: 'Terraform Infrastructure & Website Deployment'

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read

jobs:
  deploy:
    name: 'Deploy Infrastructure and Website'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    # Define environment variables used across multiple steps
    env:
      AWS_REGION: us-east-2
      TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false  # Disable wrapper for better output handling

      - name: Initialize Terraform
        id: init
        run: |
          terraform init \
            -backend-config="bucket=cicd-terraform-state-lw" \
            -backend-config="dynamodb_table=terraform-state-lock" \
            -backend-config="encrypt=true" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Format and Plan
        id: plan
        run: |
          terraform fmt -check
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Deploy Website Content
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create website directory structure
          mkdir -p website/assets/pdfs
          
          # Create basic HTML files
          cat > website/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head><title>Welcome</title></head>
          <body><h1>Welcome</h1></body>
          </html>
          EOL
          
          cat > website/error.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head><title>Error</title></head>
          <body><h1>404</h1></body>
          </html>
          EOL
          
          # Sync to S3
          aws s3 sync website/ "s3://${{ secrets.S3_BUCKET_NAME }}" \
            --delete \
            --cache-control "max-age=3600"

      - name: Get CloudFront Distribution ID
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: get-distribution-id
        run: |
          # Function to validate distribution ID format
          validate_distribution_id() {
            local id=$1
            if [[ $id =~ ^E[A-Z0-9]{13}$ ]]; then
              return 0
            else
              return 1
            fi
          }
          
          # Get distribution ID from Terraform
          echo "Getting distribution ID from Terraform..."
          tf_id=$(terraform output -json cloudfront_distribution_id | jq -r '.')
          
          # If Terraform output is empty, try AWS CLI
          if [ -z "$tf_id" ] || [ "$tf_id" = "null" ]; then
            echo "Terraform output empty, checking AWS CloudFront..."
            tf_id=$(aws cloudfront list-distributions \
              --query 'DistributionList.Items[?Status==`Deployed`].Id | [0]' \
              --output text)
          fi
          
          # Validate and set the distribution ID
          if [ -n "$tf_id" ] && validate_distribution_id "$tf_id"; then
            echo "DISTRIBUTION_ID=$tf_id" >> $GITHUB_OUTPUT
            echo "Distribution ID: $tf_id" >> $GITHUB_STEP_SUMMARY
          else
            echo "Error: Invalid or missing distribution ID: $tf_id"
            aws cloudfront list-distributions --output table
            exit 1
          fi

      - name: Invalidate CloudFront Cache
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          DISTRIBUTION_ID="${{ steps.get-distribution-id.outputs.DISTRIBUTION_ID }}"
          
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "Creating CloudFront invalidation..."
            aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*"
            echo "Cache invalidation created successfully"
          else
            echo "Error: No distribution ID available"
            exit 1
          fi
      