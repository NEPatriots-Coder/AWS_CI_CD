name: 'Terraform Infrastructure & Website Deployment'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  
jobs:
  deploy:
    name: 'Deploy Infrastructure and Website'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Infrastructure Setup
      - name: Terraform Init and Apply
        run: |
          terraform init \
            -backend-config="bucket=cicd-terraform-state-lw" \
            -backend-config="dynamodb_table=terraform-state-lock" \
            -backend-config="encrypt=true" \
            -backend-config="region=us-east-2"
          
          terraform fmt -check
          terraform plan
          
          if [[ ${{ github.ref }} == 'refs/heads/main' && ${{ github.event_name }} == 'push' ]]; then
            terraform apply -auto-approve
          fi
        env:
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

      # Website Content Deployment
      - name: Deploy Website Content
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          mkdir -p website/assets/pdfs
          echo '<!DOCTYPE html><html><head><title>Welcome</title></head><body><h1>Welcome</h1></body></html>' > website/index.html
          echo '<!DOCTYPE html><html><head><title>Error</title></head><body><h1>404</h1></body></html>' > website/error.html
          
          aws s3 sync website/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "max-age=3600"

      # CloudFront Cache Invalidation
      - name: Get CloudFront Distribution ID
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: get-distribution-id
        run: |
          # First try to get ID from Terraform output
          tf_id=$(terraform output -no-color cloudfront_distribution_id 2>/dev/null | tr -d '"')
          
          # If Terraform output fails, get first distribution from list
          if [ -z "$tf_id" ]; then
            echo "Getting ID from CloudFront list..."
            tf_id=$(aws cloudfront list-distributions --query 'DistributionList.Items[0].Id' --output text)
          fi
          
          echo "DISTRIBUTION_ID=$tf_id" >> $GITHUB_OUTPUT
          echo "CloudFront Distribution ID: $tf_id" >> $GITHUB_STEP_SUMMARY

      - name: Invalidate CloudFront Cache
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          DISTRIBUTION_ID="${{ steps.get-distribution-id.outputs.DISTRIBUTION_ID }}"
          
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "Creating invalidation for distribution: $DISTRIBUTION_ID"
            aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*"
          else
            echo "No distribution ID found"
            exit 1
          fi