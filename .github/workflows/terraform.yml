name: 'Terraform Infrastructure & Website Deployment'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  
jobs:
  deploy:
    name: 'Deploy Infrastructure and Website'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      # Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Verify S3 Bucket Existence
        run: |
          if ! aws s3api head-bucket --bucket ${{ secrets.S3_BUCKET_NAME }} 2>/dev/null; then
            echo "Creating bucket ${{ secrets.S3_BUCKET_NAME }}"
            aws s3api create-bucket \
              --bucket ${{ secrets.S3_BUCKET_NAME }} \
              --region us-east-2 \
              --create-bucket-configuration LocationConstraint=us-east-2
          else
            echo "Bucket ${{ secrets.S3_BUCKET_NAME }} already exists"
          fi

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=cicd-terraform-state-lw" \
            -backend-config="dynamodb_table=terraform-state-lock" \
            -backend-config="encrypt=true" \
            -backend-config="region=us-east-2"

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: false

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

      - name: Prepare Website Content
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          mkdir -p website/assets/pdfs
          echo '<!DOCTYPE html><html><head><title>Welcome</title></head><body><h1>Welcome</h1></body></html>' > website/index.html
          echo '<!DOCTYPE html><html><head><title>Error</title></head><body><h1>404</h1></body></html>' > website/error.html

      - name: Upload to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Syncing website content to S3..."
          aws s3 sync website/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "max-age=3600"

      - name: Debug Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Raw terraform output:"
          terraform output
          echo "JSON terraform output:"
          terraform output -json
          
      - name: Invalidate CloudFront Cache
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Export terraform output to JSON
          terraform output -json > tf_output.json
          
          # Parse the distribution ID using jq
          DISTRIBUTION_ID=$(jq -r '.cloudfront_distribution_id.value' tf_output.json)
          
          echo "Debug - Distribution ID: $DISTRIBUTION_ID"
          
          # Validate the distribution ID format
          if [[ $DISTRIBUTION_ID =~ ^E[A-Z0-9]{13}$ ]]; then
            echo "Valid Distribution ID found: $DISTRIBUTION_ID"
            aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*"
          else
            echo "Error: Invalid CloudFront distribution ID format: $DISTRIBUTION_ID"
            cat tf_output.json
            exit 1
          fi