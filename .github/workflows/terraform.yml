name: 'Terraform Infrastructure & Website Deployment'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  
jobs:
  deploy:
    name: 'Deploy Infrastructure and Website'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      # Initial setup and authentication
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Infrastructure verification and setup
      - name: Verify AWS Configuration
        run: |
          echo "Verifying AWS Configuration..."
          aws sts get-caller-identity
          aws configure list

      - name: Verify S3 Bucket
        run: |
          echo "Checking S3 bucket status..."
          if ! aws s3api head-bucket --bucket ${{ secrets.S3_BUCKET_NAME }} 2>/dev/null; then
            echo "Creating bucket ${{ secrets.S3_BUCKET_NAME }}"
            aws s3api create-bucket \
              --bucket ${{ secrets.S3_BUCKET_NAME }} \
              --region us-east-2 \
              --create-bucket-configuration LocationConstraint=us-east-2
          else
            echo "Bucket ${{ secrets.S3_BUCKET_NAME }} exists"
          fi

      # Terraform initialization and planning
      - name: Terraform Init
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=cicd-terraform-state-lw" \
            -backend-config="dynamodb_table=terraform-state-lock" \
            -backend-config="encrypt=true" \
            -backend-config="region=us-east-2"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan
        env:
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

      # Infrastructure deployment and verification
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

      - name: Verify Infrastructure State
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "=== Terraform State Details ==="
          terraform show
          
          echo "=== Terraform Outputs ==="
          terraform output || echo "No outputs available"
          
          echo "=== CloudFront Configuration ==="
          aws cloudfront list-distributions --query 'DistributionList.Items[].{Id:Id,Domain:DomainName,Status:Status,Enabled:Enabled}' --output table || echo "No distributions found"
          
          echo "=== S3 Bucket Configuration ==="
          aws s3api get-bucket-website --bucket ${{ secrets.S3_BUCKET_NAME }} || echo "No website configuration"

      # Website content deployment
      - name: Prepare Website Content
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Preparing website content..."
          mkdir -p website/assets/pdfs
          echo '<!DOCTYPE html><html><head><title>Welcome</title></head><body><h1>Welcome</h1></body></html>' > website/index.html
          echo '<!DOCTYPE html><html><head><title>Error</title></head><body><h1>404</h1></body></html>' > website/error.html

      - name: Upload to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Uploading content to S3..."
          aws s3 sync website/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "max-age=3600"

      # CloudFront cache invalidation with enhanced error handling
      - name: Debug Infrastructure State
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "=== Terraform State ==="
          terraform show | grep -A 5 cloudfront_distribution || echo "No CloudFront distribution found in state"
          
          echo "=== CloudFront Distributions ==="
          aws cloudfront list-distributions || echo "Failed to list distributions"
          
          echo "=== S3 Bucket Status ==="
          aws s3api get-bucket-website --bucket ${{ secrets.S3_BUCKET_NAME }} || echo "No website configuration"

      - name: Get CloudFront ID and Invalidate Cache
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "=== Getting CloudFront Distribution ID ==="
          
          # Debug all Terraform outputs
          echo "All Terraform outputs:"
          terraform output
          
          # Get distribution ID with error checking
          if ! DIST_OUTPUT=$(terraform output -no-color cloudfront_distribution_id 2>&1); then
            echo "Error getting CloudFront distribution ID:"
            echo "$DIST_OUTPUT"
            exit 1
          fi
          
          # Clean and validate the ID
          DISTRIBUTION_ID=$(echo "$DIST_OUTPUT" | tr -d '"' | tr -d '\n' | grep -oE 'E[A-Z0-9]{13}' || echo '')
          
          echo "Cleaned Distribution ID: ${DISTRIBUTION_ID:-none}"
          
          if [[ -n "$DISTRIBUTION_ID" ]]; then
            echo "Checking if distribution exists..."
            if aws cloudfront get-distribution --id "$DISTRIBUTION_ID" >/dev/null 2>&1; then
              echo "Distribution verified, creating invalidation..."
              aws cloudfront create-invalidation \
                --distribution-id "$DISTRIBUTION_ID" \
                --paths "/*"
            else
              echo "Distribution not found in AWS"
              aws cloudfront list-distributions --query 'DistributionList.Items[].Id' --output table
              exit 1
            fi
          else
            echo "Failed to extract valid distribution ID"
            echo "Available distributions:"
            aws cloudfront list-distributions --query 'DistributionList.Items[].Id' --output table
            exit 1
          fi

      # Final status check
      - name: Verify Deployment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "=== Final Deployment Status ==="
          echo "S3 Website URL:"
          aws s3 website s3://${{ secrets.S3_BUCKET_NAME }} --get-url || echo "Unable to get website URL"
          
          echo "CloudFront Distribution Status:"
          aws cloudfront list-distributions --query 'DistributionList.Items[?Status==`Deployed`]' --output table