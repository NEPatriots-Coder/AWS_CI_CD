name: 'Terraform Infrastructure & Website Deployment'

# Define when this workflow runs
on:
  push:
    branches: [ "main" ]
  pull_request:

# Define permissions scope
permissions:
  contents: read
  
jobs:
  deploy:
    name: 'Deploy Infrastructure and Website'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      # Step 1: Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"  # Specify version for consistency

      # Step 4: Verify and create S3 bucket if needed
      - name: Verify S3 Bucket Existence
        run: |
          if ! aws s3api head-bucket --bucket ${{ secrets.S3_BUCKET_NAME }} 2>/dev/null; then
            echo "Creating bucket ${{ secrets.S3_BUCKET_NAME }}"
            aws s3api create-bucket \
              --bucket ${{ secrets.S3_BUCKET_NAME }} \
              --region us-east-2 \
              --create-bucket-configuration LocationConstraint=us-east-2
          else
            echo "Bucket ${{ secrets.S3_BUCKET_NAME }} already exists"
          fi

      # Step 5: Initialize Terraform with backend configuration
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=cicd-terraform-state-lw" \
            -backend-config="dynamodb_table=terraform-state-lock" \
            -backend-config="encrypt=true" \
            -backend-config="region=us-east-2"

      # Step 6: Check Terraform formatting
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: false

      # Step 7: Generate Terraform plan
      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

      # Step 8: Apply Terraform changes (only on main branch push)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_bucket_name: ${{ secrets.S3_BUCKET_NAME }}

      # Step 9: Prepare and upload website content
      - name: Prepare Website Content
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create website directory structure
          mkdir -p website/assets/pdfs
          
          # Create or verify index.html
          if [ ! -f "website/index.html" ]; then
            cat > website/index.html << 'EOL'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <title>Welcome</title>
            </head>
            <body>
                <h1>Welcome to the Website</h1>
                <p>This is a default landing page.</p>
            </body>
            </html>
            EOL
          fi
          
          # Create or verify error.html
          if [ ! -f "website/error.html" ]; then
            cat > website/error.html << 'EOL'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <title>Error</title>
            </head>
            <body>
                <h1>404 - Page Not Found</h1>
                <p>The requested page could not be found.</p>
            </body>
            </html>
            EOL
          fi

      # Step 10: Sync website content to S3
      - name: Upload to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Syncing website content to S3..."
          aws s3 sync website/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "max-age=3600" \
            --acl public-read

      # Step 11: Invalidate CloudFront cache
      - name: Invalidate CloudFront Cache
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            echo "Invalidating CloudFront cache..."
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          else
            echo "Error: Could not retrieve CloudFront distribution ID"
            exit 1
          fi


  
   